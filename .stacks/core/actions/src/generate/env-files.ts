import { path as p } from '@stacksjs/path'
import { storage } from '@stacksjs/storage'
import { enums, env as e } from '@stacksjs/env'
import { envKeys, EnvKey } from '~/storage/framework/stacks/env'

console.log('Generating env files...')

// generate ./storage/framework/types/env.d.ts file from .env
const envTypes = `
// This file is auto-generated by Stacks. Do not edit this file manually.
// If you want to change the environment variables, please edit the .env file.
//
// For more information, please visit: https://stacksjs.com/docs

declare module 'bun' {
  namespace env {
    ${envKeys.map((key) => {
      console.log(`  - ${key}`)
      const value = e[key]
      console.log(`    - ${value}`)
      let type = 'string'
      if (typeof value === 'string') {
        if (value.toLowerCase() === 'true' || value.toLowerCase() === 'false') {
          type = 'boolean'
        } else if (!isNaN(parseFloat(value)) && isFinite(Number(value))) {
          type = 'number'
        } else if (enums[key]) {
          // @ts-ignore
          type = enums[key].map(item => `'${item}'`).join(' | ')
        }
      }

      return `const ${key}: ${type}`
    }).join('\n    ')}
  }
}
`

await storage.writeFile(p.projectStoragePath('framework/types/env.d.ts'), envTypes)

console.log('  - ./storage/framework/stacks/env.ts')

// generate ./storage/framework/stacks/env.ts file based on Bun.env
const env = `
// This file is auto-generated by Stacks. Do not edit this file manually.
// If you want to change the environment variables, please edit the .env file.
//
// For more information, please visit: https://stacksjs.com/docs

export const envKeys = [
  ${envKeys.map(key => `'${key}'`).join(',\n  ')}
] as const

export type EnvKey = typeof envKeys[number]
`

await storage.writeFile(p.projectStoragePath('framework/stacks/env.ts'), env)

console.log('  - ./storage/framework/stacks/env.d.ts')
